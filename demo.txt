https://caldevelopment.wordpress.com
http://caldevelopment.pagesperso-orange.fr
https://www.twitter.com/calebreseau
https://www.youtube.com/channel/UCNkDFqqhiQMv2sWBWSeHOTw


CRACKING A BASIC LICENSE CHECK PROGRAM USING GDB


In this tutorial / demo, we're gonna crack a basic c license check program using gdb on linux.
(this was inspired from a liveoverflow video (go check him plz)

commentaries > //ABCD
input > --ABCD
output > ^^ABCD


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////  ORIGINAL C CODE //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//////////                                                                //////////////
//////////     int main(int argc, char *argv[])				  //////////////
//////////     {							  //////////////
//////////     	if (argc==2)						  //////////////
//////////     	{							  //////////////
//////////     	printf("Checking key %s...\n",argv[1]);			  //////////////
//////////     		if (strcmp(argv[1],"1234-5678-ABCD")==0)	  //////////////
//////////     		{						  //////////////
//////////     		printf("%s is ok, access granted\n",argv[1]);     //////////////
//////////     		return 0;					  //////////////
//////////     		}						  //////////////
//////////     		else						  //////////////
//////////     		{						  //////////////
//////////     		printf("Wrong key, access denied\n");		  //////////////
//////////     		return 0;					  //////////////
//////////     		}						  //////////////
//////////     	}							  //////////////
//////////     	else							  //////////////
//////////     	{							  //////////////
//////////     		printf("Usage : <key>\n");			  //////////////
//////////     		return 1;					  //////////////
//////////     	}							  //////////////
//////////     }							  //////////////
//////////								  //////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

--  $>gdb lcheck 						//< open lcheck (the program we want to crack) with gdb
--  gdb>set disassembly-flavor intel 				//< make the assembler more readable
--  gdb>disassemble main  					//< dump the assembler code

////////////////////////////////////////////////////////////////////////		//////////////////////////////////////////////////
//////////////////////// \/ ASSEMBLER CODE \/ //////////////////////////////////////////////////////// \/ C TRANSLATION \/ ///////////////
////////////////////////////////////////////////////////////////////////		//////////////////////////////////////////////////

^^  	   0x0000000000400596 <+0>:	push   rbp
^^  	   0x0000000000400597 <+1>:	mov    rbp,rsp
^^  	   0x000000000040059a <+4>:	sub    rsp,0x10
^^ 	   0x000000000040059e <+8>:	mov    DWORD PTR [rbp-0x4],edi
^^ 	   0x00000000004005a1 <+11>:	mov    QWORD PTR [rbp-0x10],rsi
^^	   0x00000000004005a5 <+15>:	cmp    DWORD PTR [rbp-0x4],0x2                          //IF NOT ARGC==2 THEN 
^^ <-------0x00000000004005a9 <+19>:	jne    0x400619 <main+131>				//JUMP TO 619 == PRINTF('Usage : <key>')
^^ |	   0x00000000004005ab <+21>:	mov    rax,QWORD PTR [rbp-0x10]
^^ |	   0x00000000004005af <+25>:	add    rax,0x8
^^ |	   0x00000000004005b3 <+29>:	mov    rax,QWORD PTR [rax]
^^ |	   0x00000000004005b6 <+32>:	mov    rsi,rax
^^ |	   0x00000000004005b9 <+35>:	mov    edi,0x4006b4
^^ |	   0x00000000004005be <+40>:	mov    eax,0x0
^^ |	   0x00000000004005c3 <+45>:	call   0x400460 <printf@plt>				//PRINTF('Checking key')
^^ |	   0x00000000004005c8 <+50>:	mov    rax,QWORD PTR [rbp-0x10]
^^ |	   0x00000000004005cc <+54>:	add    rax,0x8
^^ |	   0x00000000004005d0 <+58>:	mov    rax,QWORD PTR [rax]
^^ |	   0x00000000004005d3 <+61>:	mov    esi,0x4006c8
^^ |	   0x00000000004005d8 <+66>:	mov    rdi,rax
^^ |	   0x00000000004005db <+69>:	call   0x400480 <strcmp@plt>				//IF NOT STRCMP(ARGV[1],'1234-5678-ABCD')
^^ |       0x00000000004005e0 <+74>:	test   eax,eax						//DID THE STRCMP RETURN 0 ?
^^ |   <---0x00000000004005e2 <+76>:	jne    0x400608 <main+114>				//IF NOT, JUMP TO 608 == PRINTF('WRONG')
^^ |   |   0x00000000004005e4 <+78>:	mov    rax,QWORD PTR [rbp-0x10]				//ELSE, CONTINUE
^^ |   |   0x00000000004005e8 <+82>:	add    rax,0x8
^^ |   |   0x00000000004005ec <+86>:	mov    rax,QWORD PTR [rax]
^^ |   |   0x00000000004005ef <+89>:	mov    rsi,rax
^^ |   |   0x00000000004005f2 <+92>:	mov    edi,0x4006d7
^^ |   |   0x00000000004005f7 <+97>:	mov    eax,0x0
^^ |   |   0x00000000004005fc <+102>:	call   0x400460 <printf@plt>				//PRINTF('Access granted !')
^^ |   |   0x0000000000400601 <+107>:	mov    eax,0x0
^^ |   |   0x0000000000400606 <+112>:	jmp    0x400628 <main+146>
^^ |   --->0x0000000000400608 <+114>:	mov    edi,0x4006f1
^^ |       0x000000000040060d <+119>:	call   0x400450 <puts@plt>				//PRINTF('WRONG')
^^ |       0x0000000000400612 <+124>:	mov    eax,0x0
^^ |       0x0000000000400617 <+129>:	jmp    0x400628 <main+146>
^^ --------0x0000000000400619 <+131>:	mov    edi,0x40070a					
^^	   0x000000000040061e <+136>:	call   0x400450 <puts@plt>				//PRINTF('Usage : <key>')
^^	   0x0000000000400623 <+141>:	mov    eax,0x1
^^	   0x0000000000400628 <+146>:	leave  
^^	   0x0000000000400629 <+147>:	ret

////////////////////////////////////////////////////////////////////////		//////////////////////////////////////////////////
//////////////////////// /\ ASSEMBLER CODE /\ //////////////////////////////////////////////////////// /\ C TRANSLATION /\ ///////////////
////////////////////////////////////////////////////////////////////////		//////////////////////////////////////////////////


--  gdb>break *0x00000000004005e0 //< tell gdb to stop before checking strcmp result
--  gdb>run 0401_4584_WRONG	      //< run the program with any key you want
^^	Starting program: lcheck 0401_4584_WRONG
^^	Checking key 0401_4584_WRONG...
^^	Breakpoint 1, 0x00000000004005e0 in main () //< stops before checking strcmp result (stored in eax)
--  gdb>info registers //< display registers, aka variables
^^	rax            0xffffffff	4294967295  		//< this is eax, we can see it's not equal to 0, so if we continue it will fail.
^^	rbx            0x0	0				//                  \/
^^	rcx            0x31	49				//
^^	rdx            0x0	0				//
^^	rsi            0x4006c8	4196040				//
^^	rdi            0x7fffffffe7ce	140737488349134		//
^^	rbp            0x7fffffffe470	0x7fffffffe470		//
^^	rsp            0x7fffffffe460	0x7fffffffe460		//
^^	r8             0x7fffffffe7ce	140737488349134		//
^^	r9             0x7ffff7a7c99a	140737348356506		//
^^	r10            0x7fffffffe220	140737488347680		//
^^	r11            0x7ffff7b585c0	140737349256640		//
^^	r12            0x4004a0	4195488				//	REGISTERS WE DONT CARE ABOUT
^^	r13            0x7fffffffe550	140737488348496		//
^^	r14            0x0	0				//
^^	r15            0x0	0				//
^^	rip            0x4005e0	0x4005e0 <main+74>		//
^^	eflags         0x297	[ CF PF AF SF IF ]		//
^^	cs             0x33	51				//
^^	ss             0x2b	43				//
^^	ds             0x0	0				//
^^	es             0x0	0				//
^^	fs             0x0	0				//
^^	gs             0x0	0				//		    /\

--  gdb>set $eax=0 						//< set eax to 0, so the program will act like if the strcmp returned 0
--  gdb>info registers					//< display registers, aka variables

^^	rax            0x0	0 				//< eax equals 0 : program thinks strcmp return 0!
^^	<registers we don't care about....>

--  gdb>continue 						//< continue program execution, with eax set to 0
^^	Continuing.
^^	0401_4584_WRONG is ok, access granted 			//< bingo ! we basically gave the program a random wrong key and made it think it was a
								//good one :)
